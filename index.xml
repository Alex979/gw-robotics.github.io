<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GW Robotics</title>
    <link>https://gw-robotics.github.io/</link>
    <description>Recent content on GW Robotics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, GW Robotics; all rights reserved.</copyright>
    <lastBuildDate>Wed, 21 Dec 2016 13:34:59 +0000</lastBuildDate>
    
	<atom:link href="https://gw-robotics.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SEAS Innovation Challenge - Start</title>
      <link>https://gw-robotics.github.io/blog/2016/12/21/seas-innovation-challenge-start/</link>
      <pubDate>Wed, 21 Dec 2016 13:34:59 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/12/21/seas-innovation-challenge-start/</guid>
      <description>We have been selected to receive a free Raspberry Pi kit for the SEAS Innovation challenge! The components of the kit can be found from the product site here.
The goal is to have the Raspberry Pi configured for use with the robot (expect a guide for that soon) over winter break and for a basic roadmap to be made for where to go with the project.
Stay tuned for updates on the progress.</description>
    </item>
    
    <item>
      <title>HOW-TO: OpenCV Installation (Windows)</title>
      <link>https://gw-robotics.github.io/blog/2016/11/08/how-to-opencv-installation-windows/</link>
      <pubDate>Tue, 08 Nov 2016 14:37:34 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/11/08/how-to-opencv-installation-windows/</guid>
      <description>This tutorial is for installation of OpenCV for Python on a Windows PC from prebuilt files. A fully detailed tutorial can be found at the OpenCV documentation.
To Install OpenCV and Dependencies First, make sure that your computer has the right Python setup with Numpy. Matplotlib is optional and is mostly for use with the tutorials. You can check that you have Python 2.7.whatever using:
python -V  After verifying that you have Python 2.</description>
    </item>
    
    <item>
      <title>Software Meeting 11/5/16 Notes</title>
      <link>https://gw-robotics.github.io/blog/2016/11/05/software-meeting-11-5-16-notes/</link>
      <pubDate>Sat, 05 Nov 2016 15:39:28 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/11/05/software-meeting-11-5-16-notes/</guid>
      <description>Today&amp;rsquo;s meeting, we basically just wrote some pseudocode for the drivetrain and for a generic sensor. These will be expanded on once more features are needed or when a physical part is given to us. As of right now they are as follows:
drivetrain.txt:
ultrasonic [8] encoder [6] gyro&amp;amp;acceleratometer motor [6] drive (forward_speed, rotation, strafe_speed): left motors = forward_speed right motors = forward_speed strafe motors = strafe_speed if rotation &amp;lt; 0 clockwise left motors = forward_speed right motors = - forward_speed else if rotation &amp;gt; 0 anticlockwise right = forward_speed left = -forward_speed get ultrasonic in array: return value of ultrasonic sensor at index get encoder in array: return value of encoder at index get gyro rotation: return value of gyro at index get acceleration on axis: if x axis: TODO: Stuff if y axis: TODO: Stuff if z axis: TODO: Stuff limit: while true if absolute value speed &amp;lt; limit speed *= limit/speed else if abs(speed) &amp;gt; limit speed *= limit/speed  sensor.</description>
    </item>
    
    <item>
      <title>Design Meeting 10/29/2016 Notes</title>
      <link>https://gw-robotics.github.io/blog/2016/10/29/design-meeting-10-29-2016-notes/</link>
      <pubDate>Sat, 29 Oct 2016 11:11:25 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/10/29/design-meeting-10-29-2016-notes/</guid>
      <description>TL;DR We talked about drivetrain design.
It was confirmed that we are not using a suspension system on the middle wheels with the H-drive. This decision was mainly to avoid complexity. The issue of the wheels hitting something was discussed and the possible sensors needed to detect that. It was decided that we just won&amp;rsquo;t hit anything unexpected, or use the ultrasonic sensor to detect if we do by chance. It was also stated that the frame will be above the wheels, allowing us to move the wheels to the edge of the size constraint.</description>
    </item>
    
    <item>
      <title>HOW-TO: Arduino with Raspberry Pi</title>
      <link>https://gw-robotics.github.io/blog/2016/10/29/how-to-arduino-with-raspberry-pi/</link>
      <pubDate>Sat, 29 Oct 2016 02:04:04 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/10/29/how-to-arduino-with-raspberry-pi/</guid>
      <description>The 2017 robot will be interacting between the Arduino (for sensor reading and PWM output) and the Raspberry Pi through a Python module called Nanpy. The purpose of this how-to is for basic setup and usage that may not be completely obvious from Nanpy&amp;rsquo;s official documentation. We will be using repositories from the GW Robotics organisation as a way to standardise everyone&amp;rsquo;s code bases.
Arduino Setup Please note, this is only necessary if the Arduino does not already have the Nanpy firmware compiled on it.</description>
    </item>
    
    <item>
      <title>Testing Arduino-Raspberry Pi Serial Comms</title>
      <link>https://gw-robotics.github.io/blog/2016/10/26/testing-arduino-raspberry-pi-serial-comms/</link>
      <pubDate>Wed, 26 Oct 2016 02:15:43 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/10/26/testing-arduino-raspberry-pi-serial-comms/</guid>
      <description>Tonight, Nam went through a tutorial on communicating via a USB cable between an Arduino and a Raspberry Pi. Here are a few things to note: - The tutorial did not mention the need to download PySerial. This was done via pip. - The Arduino sketch was compiled via a computer, and then the Arduino was connected to the Raspberry Pi. - The Raspberry Pi python program was written using Nano.</description>
    </item>
    
    <item>
      <title>First Software Meeting Summary</title>
      <link>https://gw-robotics.github.io/blog/2016/10/15/first-software-meeting-summary/</link>
      <pubDate>Sat, 15 Oct 2016 00:36:01 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/blog/2016/10/15/first-software-meeting-summary/</guid>
      <description>Today was the first software team meeting! As there is no finalised robot design, there was not much to talk about code-wise. Instead, points discussed during the GroupMe chat was just reiterated. They are as follows:
 Using Python on a Raspberry Pi to do most of the logic Using C/Arduino on an Arduino to get sensor input and output to motor controllers Arduino and Raspberry Pi will communicate through Serial protocols GitHub and Git will be used to manage the code The programming projects are as follows:  Driving Vision Baby grabbing mechanism Fire Extinguisher Mapping    The goal for the next programming meeting is to have more members, as well as start talking about pseudo-code.</description>
    </item>
    
    <item>
      <title>Calendar</title>
      <link>https://gw-robotics.github.io/calendar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/calendar/</guid>
      <description>     </description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://gw-robotics.github.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/contact/</guid>
      <description>We are here to help you Are you curious about something? Do you want to make robots with us?
Please feel free to contact us, and we will respond to you as soon as possible.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://gw-robotics.github.io/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/faq/</guid>
      <description>Robotics is a pretty difficult and complex topic, so here are some of the most commonly asked questions we hear. If you have a question not mentioned here, feel free to email us.
1. WHAT IS A ROBOT? A robot is a machine that can complete a task that affects an environment.
2. HOW DO I JOIN? All you have to do is show up to a meeting! We meet (almost) every Wednesday night in Funger 223 at 9pm.</description>
    </item>
    
    <item>
      <title>Sumo Robot Competition</title>
      <link>https://gw-robotics.github.io/sumo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gw-robotics.github.io/sumo/</guid>
      <description>.button { background-color: #004065; border: none; color: white; padding: 15px 32px; text-align: center; text-decoration: none; display: inline-block; font-size: 36px; }  Register Now!    
About The Competition Robot-sumo is a popular type of robotics competition in which teams create robots of various sizes, with the objective of pushing the other teams&amp;rsquo; robots out of a ring (much like normal sumo wrestling).
This Sumo Robot Competition is GW-hosted Robot-sumo competition, with an emphasis on being as student-friendly and accessible as possible.</description>
    </item>
    
  </channel>
</rss>